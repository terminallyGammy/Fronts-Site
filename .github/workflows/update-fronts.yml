name: Update Fronts (SimplyPlural → fronts.json)

on:
  schedule:
    - cron: '*/5 * * * *'   # every 5 min
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PAGES_BRANCH: main        # your Pages branch
  PAGES_DIR: .              # change if using docs/ or similar
  WARNING_FIELD: "/!\\━━━━━━━━━━━ WARNING ━━━━━━━━━━━/!\\"

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Pages branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PAGES_BRANCH }}
          fetch-depth: 0

      - name: Debug repo state
        run: |
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"
          ls -la
          ls -la "${{ env.PAGES_DIR }}" || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch fronters + members → fronts.json
        shell: bash
        env:
          SP_TOKEN: ${{ secrets.SP_TOKEN }}
          PAGES_DIR: ${{ env.PAGES_DIR }}
          WARNING_FIELD: ${{ env.WARNING_FIELD }}
        run: |
          set -euo pipefail
          mkdir -p "${PAGES_DIR}"

          # --- 1) Get systemId from /v1/me
          echo "→ /v1/me"
          CODE=$(curl -sS -o "${PAGES_DIR}/me.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            https://api.apparyllis.com/v1/me)
          if [ "$CODE" != "200" ]; then
            echo "Failed to get /me"; cat "${PAGES_DIR}/me.json"; exit 1
          fi
          USER_ID=$(jq -r '.id' "${PAGES_DIR}/me.json")
          SYSTEM_ID=$(jq -r '.content.systemId // .content.uid' "${PAGES_DIR}/me.json")
          if [ -z "$SYSTEM_ID" ] || [ "$SYSTEM_ID" = "null" ]; then
            SYSTEM_ID="$USER_ID"
          fi
          echo "systemId=$SYSTEM_ID"

          # --- 2) Get current fronters
          echo "→ /v1/fronters/"
          CODE=$(curl -sS -o "${PAGES_DIR}/fronters.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            https://api.apparyllis.com/v1/fronters/)
          if [ "$CODE" != "200" ]; then
            echo "Failed to get fronters"; cat "${PAGES_DIR}/fronters.json"; exit 1
          fi

          # extract live member IDs
          LIVE_IDS=$(jq -r '[ .[] | select(.content.live==true) | .content.member ] | unique | .[]?' "${PAGES_DIR}/fronters.json")
          LAST_CHANGE=$(jq -r '[ .[] | .content.lastOperationTime?, .content.startTime? ] | map(select(.!=null)) | max // empty' "${PAGES_DIR}/fronters.json")
          : "${LAST_CHANGE:=}"

          if [ -z "$LIVE_IDS" ]; then
            echo '{"membersFronting":[],"lastChange":null}' | jq -S . > "${PAGES_DIR}/fronts.json"
            exit 0
          fi

          # --- 3) Get all members for system
          echo "→ /v1/members/${SYSTEM_ID}"
          CODE=$(curl -sS -o "${PAGES_DIR}/members.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            "https://api.apparyllis.com/v1/members/${SYSTEM_ID}")
          if [ "$CODE" != "200" ]; then
            echo "Failed to get members"; cat "${PAGES_DIR}/members.json"; exit 1
          fi

          # --- 4) Join live IDs with member info
          jq -S --argjson ids "[${LIVE_IDS// /,}]" --arg WARN "$WARNING_FIELD" --arg lc "$LAST_CHANGE" '
            . as $members
            | $ids as $ids
            | [ $members[] | select(.id as $id | $ids | index($id)) | {
                id,
                uuid: (.uuid // null),
                name: (.name // null),
                displayName: (.name // null),
                pronouns: (.pronouns // null),
                avatar: (.avatarUrl // null),
                color: (.color // null),
                info: (.info // null),
                warning: (.fields[$WARN] // .customFields[$WARN] // null)
              } ]
            | { membersFronting: ., lastChange: (if $lc=="" then null else (try (tonumber/1000|todate) catch $lc) end) }
          ' "${PAGES_DIR}/members.json" > "${PAGES_DIR}/fronts.json"

          echo "Wrote $(wc -c < "${PAGES_DIR}/fronts.json") bytes to fronts.json"

      - name: Validate JSON
        run: python -c "import json; json.load(open('${{ env.PAGES_DIR }}/fronts.json')); print('✅ fronts.json is valid')"

      - name: Commit and push if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${PAGES_DIR}/fronts.json"
          if git diff --cached --quiet; then
            echo "No changes."
            exit 0
          fi
          git commit -m "Update fronts.json [skip ci]"
          git push origin "${PAGES_BRANCH}"
