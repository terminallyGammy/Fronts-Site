name: Update Fronts (SimplyPlural → fronts.json)

on:
  schedule:
    - cron: '*/5 * * * *'   # every ~5 min
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PAGES_BRANCH: main        # change if your Pages branch is different (e.g., gh-pages)
  PAGES_DIR: .              # change to docs if your site serves from /docs

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Pages branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PAGES_BRANCH }}
          fetch-depth: 0

      - name: "Debug: show branch & tree"
        shell: bash
        run: |
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Repo root contents:"; ls -la
          echo "PAGES_DIR contents:"; ls -la "${{ env.PAGES_DIR }}" || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch + normalize fronters → fronts.json
        shell: bash
        env:
          SP_TOKEN: ${{ secrets.SP_TOKEN }}
          PAGES_DIR: ${{ env.PAGES_DIR }}
          WARNING_FIELD: "/!\\━━━━━━━━━━━ WARNING ━━━━━━━━━━━/!\\"
        run: |
          set -euo pipefail
          test -n "${SP_TOKEN}" || { echo "ERROR: SP_TOKEN secret is not set"; exit 1; }
          mkdir -p "${PAGES_DIR}"

          hdr() { sed -n '1,60p' "$1" 2>/dev/null || true; }

          # --- A) Get userId and possible systemId(s)
          echo "→ /v1/me"
          CODE_ME=$(curl -sS -o "${PAGES_DIR}/me.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            https://api.apparyllis.com/v1/me || true)
          echo "HTTP ${CODE_ME}"
          [ "${CODE_ME}" = "200" ] || { echo "Cannot get /v1/me"; cat "${PAGES_DIR}/me.json" || true; exit 1; }
          USER_ID=$(jq -r '.id // empty' "${PAGES_DIR}/me.json")
          [ -n "${USER_ID}" ] || { echo "ERROR: missing user id in /v1/me"; exit 1; }
          echo "userId=${USER_ID}"

          echo "→ /v1/user/${USER_ID}"
          CODE_USER=$(curl -sS -o "${PAGES_DIR}/user.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            "https://api.apparyllis.com/v1/user/${USER_ID}" || true)
          echo "HTTP ${CODE_USER}"
          CANDS=$(jq -r '
            [
              .systemId, .systemID, .system,
              .content.systemId, .content.systemID, .content.system
            ] | map(select(.!=null)) | unique | .[]
          ' "${PAGES_DIR}/user.json" 2>/dev/null || true)
          CAND_LIST="${CANDS} ${USER_ID}"
          echo "systemId candidates: ${CAND_LIST}"

          # --- B) Get current fronters
          echo "→ /v1/fronters/"
          CODE_F=$(curl -sS -o "${PAGES_DIR}/fh.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            https://api.apparyllis.com/v1/fronters/ || true)
          echo "HTTP ${CODE_F}"
          [ "${CODE_F}" = "200" ] || { echo "Cannot get fronters"; cat "${PAGES_DIR}/fh.json" || true; exit 1; }

          if jq -e 'type=="object" and (.membersFronting|type=="array")' "${PAGES_DIR}/fh.json" >/dev/null; then
            jq -S . "${PAGES_DIR}/fh.json" > "${PAGES_DIR}/fronts.json"
            exit 0
          fi

          echo "Normalizing history → membersFronting…"
          LIVE_IDS=$(jq -r '[ .[] | select(.content.live==true) | .content.member ] | unique | .[]?' "${PAGES_DIR}/fh.json" || true)
          LAST_CHANGE=$(jq -r '[ .[] | .content.lastOperationTime?, .content.startTime? ] | map(select(.!=null)) | max // empty' "${PAGES_DIR}/fh.json" || true)
          : "${LAST_CHANGE:=}"

          echo '[]' > "${PAGES_DIR}/mf.json"
          if [ -z "${LIVE_IDS}" ]; then
            echo '{"membersFronting": [], "lastChange": null}' | jq -S . > "${PAGES_DIR}/fronts.json"
            exit 0
          fi

          # --- C1) Bulk members endpoint
          HAVE_MEMS=0
          echo "→ /v1/members/"
          CODE_MEMS=$(curl -sS -o "${PAGES_DIR}/members.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            https://api.apparyllis.com/v1/members/ || true)
          if [ "${CODE_MEMS}" != "200" ]; then
            CODE_MEMS=$(curl -sS -o "${PAGES_DIR}/members.json" -w "%{http_code}" \
              -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
              https://api.apparyllis.com/v1/members/self || true)
          fi
          [ "${CODE_MEMS}" = "200" ] && HAVE_MEMS=1

          if [ "${HAVE_MEMS}" = "1" ]; then
            IDS_JSON=$(printf '%s\n' ${LIVE_IDS} | jq -R . | jq -s .)
            jq -S --argjson ids "${IDS_JSON}" --arg WARN "${WARNING_FIELD}" '
              ( reduce .[] as $m ({}; .[$m.id] = {
                  id: $m.id,
                  uuid: ($m.uuid // null),
                  name: ($m.name // null),
                  displayName: ($m.name // null),
                  pronouns: ($m.pronouns // null),
                  avatar: ($m.avatarUrl // null),
                  color: ($m.color // null),
                  info: ($m.info // null),
                  warning: ( ($m.fields[$WARN] // $m.customFields[$WARN] // null) )
                })
              ) as $map
              | {
                  membersFronting: ( $ids | map($map[.]) | map(select(.!=null)) ),
                  lastChange: null
                }
            ' "${PAGES_DIR}/members.json" > "${PAGES_DIR}/fronts.tmp.json"

            jq -S --arg lc "${LAST_CHANGE:-}" '
              .lastChange = ( $lc | if .=="" then null else (try (tonumber / 1000 | todate) catch .) end )
            ' "${PAGES_DIR}/fronts.tmp.json" > "${PAGES_DIR}/fronts.json"
            rm -f "${PAGES_DIR}/fronts.tmp.json"
          else
            # --- C2) Fallback per-member lookups
            echo "Bulk members unavailable; falling back to per-member lookups"
            echo '[]' > "${PAGES_DIR}/mf2.json"

            for ID in ${LIVE_IDS}; do
              GOT=0
              for SID in ${CAND_LIST}; do
                [ -n "${SID}" ] || continue
                MEM_URL="https://api.apparyllis.com/v1/member/${SID}/${ID}"
                CODE_M=$(curl -sS -o "${PAGES_DIR}/m.json" -w "%{http_code}" \
                  -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" "${MEM_URL}" || true)
                if [ "${CODE_M}" = "200" ]; then
                  jq -S --arg WARN "${WARNING_FIELD}" '{
                    id: (.id // "'${ID}'"),
                    uuid: (.uuid // null),
                    name: (.name // null),
                    displayName: (.name // null),
                    pronouns: (.pronouns // null),
                    avatar: (.avatarUrl // null),
                    color: (.color // null),
                    info: (.info // null),
                    warning: ( .fields[$WARN] // .customFields[$WARN] // null )
                  }' "${PAGES_DIR}/m.json" > "${PAGES_DIR}/one.json"
                  GOT=1
                  break
                fi
              done

              if [ "${GOT}" = "0" ]; then
                echo '{ "id": "'${ID}'", "uuid": null, "name": null, "displayName": null, "pronouns": null, "avatar": null, "color": null, "info": null, "warning": null }' > "${PAGES_DIR}/one.json"
              fi

              jq -S '. + [ input ]' "${PAGES_DIR}/mf2.json" "${PAGES_DIR}/one.json" > "${PAGES_DIR}/newmf2.json"
              mv "${PAGES_DIR}/newmf2.json" "${PAGES_DIR}/mf2.json"
            done

            jq -S --arg lc "${LAST_CHANGE:-}" '{
              membersFronting: .,
              lastChange: ( $lc | if .=="" then null else (try (tonumber / 1000 | todate) catch .) end )
            }' "${PAGES_DIR}/mf2.json" > "${PAGES_DIR}/fronts.json"
          fi

          echo "Wrote $(wc -c < "${PAGES_DIR}/fronts.json") bytes to fronts.json"

      - name: Show first 400 chars of fronts.json (debug)
        shell: bash
        env:
          PAGES_DIR: ${{ env.PAGES_DIR }}
        run: |
          head -c 400 "${PAGES_DIR}/fronts.json" || true
          echo

      - name: Validate JSON
        shell: bash
        env:
          PAGES_DIR: ${{ env.PAGES_DIR }}
        run: |
          python -c "import json; json.load(open('${{ env.PAGES_DIR }}/fronts.json')); print('fronts.json is valid JSON')"

      - name: Commit and push if changed
        shell: bash
        env:
          PAGES_BRANCH: ${{ env.PAGES_BRANCH }}
          PAGES_DIR: ${{ env.PAGES_DIR }}
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${PAGES_DIR}/fronts.json"
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Update fronts.json [skip ci]"
          git push origin "${PAGES_BRANCH}"
