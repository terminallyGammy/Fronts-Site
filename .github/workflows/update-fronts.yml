name: Update Fronts (SimplyPlural → fronts.json)

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PAGES_BRANCH: main
  PAGES_DIR: .
  WARNING_FIELD: "/!\\━━━━━━━━━━━ WARNING ━━━━━━━━━━━/!\\"   # <-- exact label text

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Pages branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PAGES_BRANCH }}
          fetch-depth: 0

      - name: "Debug: show branch & tree"
        shell: bash
        run: |
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Repo root contents:"; ls -la
          echo "PAGES_DIR contents:"; ls -la "${{ env.PAGES_DIR }}" || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch fronters + members + field defs → fronts.json
        shell: bash
        env:
          SP_TOKEN: ${{ secrets.SP_TOKEN }}
          PAGES_DIR: ${{ env.PAGES_DIR }}
          WARNING_FIELD: ${{ env.WARNING_FIELD }}
        run: |
          set -euo pipefail
          test -n "${SP_TOKEN}" || { echo "ERROR: SP_TOKEN secret is not set"; exit 1; }
          test -n "${WARNING_FIELD}" || { echo "ERROR: WARNING_FIELD env is empty"; exit 1; }
          mkdir -p "${PAGES_DIR}"

          # 1) Identify systemId
          echo "→ /v1/me"
          CODE_ME=$(curl -sS -o "${PAGES_DIR}/me.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            https://api.apparyllis.com/v1/me || true)
          echo "HTTP ${CODE_ME}"
          [ "${CODE_ME}" = "200" ] || { echo "Cannot fetch /v1/me"; head -c 400 "${PAGES_DIR}/me.json" || true; exit 1; }
          SYSTEM_ID=$(jq -r '.content.systemId // .content.uid // .id' "${PAGES_DIR}/me.json")
          [ -n "${SYSTEM_ID}" ] || { echo "systemId not found"; exit 1; }
          echo "systemId=${SYSTEM_ID}"

          # 2) Current fronters (many deployments return a history array)
          echo "→ /v1/fronters/"
          CODE_F=$(curl -sS -o "${PAGES_DIR}/fh.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            https://api.apparyllis.com/v1/fronters/ || true)
          echo "HTTP ${CODE_F}"
          [ "${CODE_F}" = "200" ] || { echo "Cannot get fronters"; head -c 400 "${PAGES_DIR}/fh.json" || true; exit 1; }

          LAST_CHANGE=$(jq -r '[ .[] | .content.lastOperationTime?, .content.startTime? ] | map(select(.!=null)) | max // empty' "${PAGES_DIR}/fh.json")
          : "${LAST_CHANGE:=}"

          # 3) Members (full list)
          echo "→ /v1/members/${SYSTEM_ID}"
          CODE_MEM=$(curl -sS -o "${PAGES_DIR}/members.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            "https://api.apparyllis.com/v1/members/${SYSTEM_ID}" || true)
          echo "HTTP ${CODE_MEM}"
          [ "${CODE_MEM}" = "200" ] || { echo "Cannot get members"; head -c 400 "${PAGES_DIR}/members.json" || true; exit 1; }

          # 4) Field definitions (label map)
          echo "→ /v1/fields/${SYSTEM_ID}"
          CODE_FDEF=$(curl -sS -o "${PAGES_DIR}/fielddefs.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" -H "Accept: application/json" \
            "https://api.apparyllis.com/v1/fields/${SYSTEM_ID}" || true)
          echo "HTTP ${CODE_FDEF}"
          if [ "${CODE_FDEF}" != "200" ]; then
            echo "WARNING: could not fetch field definitions; custom fields may be missing."
            echo '[]' > "${PAGES_DIR}/fielddefs.json"
          fi

          # 5) Join → fronts.json
          jq -n \
            --argjson fh  "$(cat "${PAGES_DIR}/fh.json")" \
            --argjson mem "$(cat "${PAGES_DIR}/members.json")" \
            --argjson fdef "$(cat "${PAGES_DIR}/fielddefs.json")" \
            --arg lc "${LAST_CHANGE:-}" \
            --arg WARNING_FIELD "${WARNING_FIELD}" '
          def to_label_map:
            (reduce .[] as $d ({}; . + { ($d.id // $d._id // $d.uuid // $d.name // ""): ($d.name // $d.label // $d.title // "") }))
            # strip empties
            | with_entries(select(.key != "" and .value != ""));

          def extract_fields($m; $labels):
            # Member may expose values in many ways; try them all.
            # Build list of [defId, label, value] and then normalize.
            ( $labels | to_entries ) as $defs
            | [ $defs[] as $d |
                $d.key as $id |
                $d.value as $label |
                # lookups:
                (
                  # 1) object at m.fields[id] with nested value(s)
                  ( $m.fields?[$id].value? // $m.fields?[$id]? // null ) //
                  # 2) flat maps commonly seen
                  ( $m.fieldValues?[$id] // $m.fieldsValue?[$id] // $m.values?[$id] // null )
                ) as $val
                | select($val != null)
                | {
                    label: $label,
                    value:
                      ( if ($val|type)=="object" then
                          # typical shapes: {value:"X"} or {text:"X"} or {content:"X"}
                          ( $val.value // $val.text // $val.content // ($val|tostring) )
                        else $val end ),
                    private: ( $m.fields?[$id].private // false ),
                    type:    ( $m.fields?[$id].type    // null )
                  }
              ]
            # prune blanks
            | map(select((.label|tostring|length)>0 and (.value|tostring|length)>0));

          {
            lastChange: (if $lc=="" then null else (try ($lc|tonumber/1000|todate) catch .) end),
            membersFronting: (
              $fh
              | map(select(.content.live==true))
              | map(.content.member)
              | unique
              | map(
                  . as $mid
                  | ( ($mem[] | select(.id==$mid) | .content) // null ) as $m
                  | if $m != null then
                      ( $fdef | to_label_map ) as $labels
                      | extract_fields($m; $labels) as $allFields
                      | {
                          id: $mid,
                          displayName: $m.name,
                          pronouns: $m.pronouns,
                          avatar: $m.avatarUrl,
                          color: $m.color,
                          description: ($m.desc // $m.info // null),
                          fields: $allFields,
                          warning: (
                            $allFields
                            | map(select(.label == $WARNING_FIELD) | .value)
                            | first // null
                          )
                        }
                    else
                      { id: $mid, displayName: null, pronouns: null, avatar: null, color: null, description: null, fields: [], warning: null }
                    end
                )
            )
          }' > "${PAGES_DIR}/fronts.json"

          echo "Wrote $(wc -c < "${PAGES_DIR}/fronts.json") bytes to fronts.json"
          head -c 400 "${PAGES_DIR}/fronts.json" || true; echo

      - name: Validate JSON
        shell: bash
        env:
          PAGES_DIR: ${{ env.PAGES_DIR }}
        run: |
          python -c "import json; json.load(open('${{ env.PAGES_DIR }}/fronts.json')); print('✅ fronts.json is valid')"

      - name: Commit and push if changed
        shell: bash
        env:
          PAGES_BRANCH: ${{ env.PAGES_BRANCH }}
          PAGES_DIR: ${{ env.PAGES_DIR }}
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${PAGES_DIR}/fronts.json"
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Update fronts.json [skip ci]"
          git push origin "${PAGES_BRANCH}"
