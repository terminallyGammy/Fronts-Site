name: Update Fronts (SimplyPlural → fronts.json)

on:
  schedule:
    - cron: '*/5 * * * *'   # every ~5 min
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PAGES_BRANCH: main
  PAGES_DIR: .
  WARNING_FIELD: "/!\\━━━━━━━━━━━ WARNING ━━━━━━━━━━━/!\\"

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Pages branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PAGES_BRANCH }}
          fetch-depth: 0

      - name: "Debug: show branch & tree"
        run: |
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Repo root contents:"; ls -la
          echo "PAGES_DIR contents:"; ls -la "${{ env.PAGES_DIR }}" || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch + normalize fronters → fronts.json
        shell: bash
        env:
          SP_TOKEN: ${{ secrets.SP_TOKEN }}
          PAGES_DIR: ${{ env.PAGES_DIR }}
          WARNING_FIELD: ${{ env.WARNING_FIELD }}
        run: |
          set -euo pipefail
          test -n "${SP_TOKEN}" || { echo "ERROR: SP_TOKEN secret is not set"; exit 1; }
          mkdir -p "${PAGES_DIR}"

          # --- A) Find systemId ---
          echo "→ /v1/me"
          CODE_ME=$(curl -sS -o "${PAGES_DIR}/me.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" \
            -H "Accept: application/json" \
            https://api.apparyllis.com/v1/me || true)
          echo "HTTP ${CODE_ME}"
          SYSTEM_ID=$(jq -r '.id // .content.uid // empty' "${PAGES_DIR}/me.json")
          [ -n "${SYSTEM_ID}" ] || { echo "ERROR: systemId not found"; exit 1; }
          echo "systemId=${SYSTEM_ID}"

          # --- B) Get fronters ---
          echo "→ /v1/fronters/"
          CODE_F=$(curl -sS -o "${PAGES_DIR}/fronters.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" \
            -H "Accept: application/json" \
            https://api.apparyllis.com/v1/fronters/ || true)
          echo "HTTP ${CODE_F}"
          if [ "${CODE_F}" != "200" ]; then
            echo "ERROR fetching fronters"; cat "${PAGES_DIR}/fronters.json"; exit 1
          fi

          # Direct format? Keep as-is.
          if jq -e 'type=="object" and (.membersFronting|type=="array")' "${PAGES_DIR}/fronters.json" >/dev/null; then
            jq -S . "${PAGES_DIR}/fronters.json" > "${PAGES_DIR}/fronts.json"
            exit 0
          fi

          # --- C) If history array, normalize ---
          echo "Normalizing history → membersFronting…"
          LIVE_IDS=$(jq '[ .[] | select(.content.live==true) | .content.member ] | unique' "${PAGES_DIR}/fronters.json")
          LAST_CHANGE=$(jq -r '[ .[] | .content.lastOperationTime?, .content.startTime? ] | map(select(.!=null)) | max // empty' "${PAGES_DIR}/fronters.json")
          : "${LAST_CHANGE:=}"

          if [ "${LIVE_IDS}" = "[]" ]; then
            echo '{"membersFronting": [], "lastChange": null}' | jq -S . > "${PAGES_DIR}/fronts.json"
            exit 0
          fi

          echo "→ /v1/members/${SYSTEM_ID}"
          CODE_MEM=$(curl -sS -o "${PAGES_DIR}/members.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" \
            -H "Accept: application/json" \
            "https://api.apparyllis.com/v1/members/${SYSTEM_ID}" || true)
          echo "HTTP ${CODE_MEM}"

          if [ "${CODE_MEM}" != "200" ]; then
            echo "Members fetch failed"; cat "${PAGES_DIR}/members.json"; exit 1
          fi

          jq -S --argjson ids "$LIVE_IDS" --arg WARN "$WARNING_FIELD" --arg lc "$LAST_CHANGE" '
            . as $members
            | [ $members[] | select(.id as $id | $ids | index($id)) | {
                id,
                uuid: (.uuid // null),
                name: (.name // null),
                displayName: (.name // null),
                pronouns: (.pronouns // null),
                avatar: (.avatarUrl // null),
                color: (.color // null),
                info: (.info // null),
                warning: (.fields[$WARN] // .customFields[$WARN] // null)
              } ]
            | { membersFronting: ., lastChange: (if $lc=="" then null else (try (tonumber/1000|todate) catch $lc) end) }
          ' "${PAGES_DIR}/members.json" > "${PAGES_DIR}/fronts.json"

          echo "Wrote $(wc -c < "${PAGES_DIR}/fronts.json") bytes to fronts.json"

      - name: Show first 400 chars of fronts.json (debug)
        run: |
          head -c 400 "${PAGES_DIR}/fronts.json" || true
          echo

      - name: Validate JSON
        run: |
          python -c "import json; json.load(open('${{ env.PAGES_DIR }}/fronts.json')); print('fronts.json is valid JSON')"

      - name: Commit and push if changed
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${PAGES_DIR}/fronts.json"
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Update fronts.json [skip ci]"
          git push origin "${PAGES_BRANCH}"
