name: Update Fronts (SimplyPlural → fronts.json)

on:
  schedule:
    - cron: '*/5 * * * *'   # every ~5 min
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PAGES_BRANCH: main
  PAGES_DIR: .

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Pages branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PAGES_BRANCH }}
          fetch-depth: 0

      - name: "Debug: show branch & tree"
        shell: bash
        run: |
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Repo root contents:"; ls -la
          echo "PAGES_DIR contents:"; ls -la "${{ env.PAGES_DIR }}" || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch fronters + members → fronts.json
        shell: bash
        env:
          SP_TOKEN: ${{ secrets.SP_TOKEN }}
          PAGES_DIR: ${{ env.PAGES_DIR }}
          WARNING_FIELD: ${{ env.WARNING_FIELD }}
        run: |
          set -euo pipefail
          test -n "${SP_TOKEN}" || { echo "ERROR: SP_TOKEN secret is not set"; exit 1; }
          mkdir -p "${PAGES_DIR}"

          # 1) Identify systemId (fallbacks included)
          echo "→ /v1/me"
          CODE_ME=$(curl -sS -o "${PAGES_DIR}/me.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" \
            -H "Accept: application/json" \
            https://api.apparyllis.com/v1/me || true)
          echo "HTTP ${CODE_ME}"
          if [ "${CODE_ME}" != "200" ]; then
            echo "ERROR: cannot fetch /v1/me"; cat "${PAGES_DIR}/me.json"; exit 1
          fi
          SYSTEM_ID=$(jq -r '.content.systemId // .content.uid // .id' "${PAGES_DIR}/me.json")
          [ -n "${SYSTEM_ID}" ] || { echo "ERROR: systemId not found in /v1/me"; exit 1; }
          echo "systemId=${SYSTEM_ID}"

          # 2) Get current fronters (history array)
          echo "→ /v1/fronters/"
          CODE_F=$(curl -sS -o "${PAGES_DIR}/fh.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" \
            -H "Accept: application/json" \
            -H "Cache-Control: no-cache" \
            https://api.apparyllis.com/v1/fronters/ || true)
          echo "HTTP ${CODE_F}"
          if [ "${CODE_F}" != "200" ]; then
            echo "ERROR: cannot get fronters"; cat "${PAGES_DIR}/fh.json"; exit 1
          fi

          # lastChange from ms → ISO
          LAST_CHANGE=$(
            jq -r '[ .[] | .content.lastOperationTime?, .content.startTime? ] | map(select(.!=null)) | max // empty' "${PAGES_DIR}/fh.json"
          )
          : "${LAST_CHANGE:=}"

          # 3) Get full members list
          echo "→ /v1/members/${SYSTEM_ID}"
          CODE_MEM=$(curl -sS -o "${PAGES_DIR}/members.json" -w "%{http_code}" \
            -H "Authorization: ${SP_TOKEN}" \
            -H "Accept: application/json" \
            -H "Cache-Control: no-cache" \
            "https://api.apparyllis.com/v1/members/${SYSTEM_ID}" || true)
          echo "HTTP ${CODE_MEM}"
          if [ "${CODE_MEM}" != "200" ]; then
            echo "ERROR: cannot get members"; head -c 400 "${PAGES_DIR}/members.json" || true; echo
            exit 1
          fi

          # 4) Join fronters (live) with member profiles → fronts.json
          jq -n \
            --argjson fh "$(cat "${PAGES_DIR}/fh.json")" \
            --argjson mem "$(cat "${PAGES_DIR}/members.json")" \
            --arg lc "${LAST_CHANGE:-}" \
            --arg WARNING_FIELD "${WARNING_FIELD}" '
{
  lastChange: (if $lc=="" then null else (try ($lc|tonumber/1000|todate) catch .) end),
  membersFronting: (
    $fh
    | map(select(.content.live==true))
    | map(.content.member)
    | unique
    | map(
        . as $mid
        | ( ( $mem[] | select(.id==$mid) | .content ) // null ) as $m
        | if $m != null then
            # build fields array and pick WARNING
            ( ($m.fields // {}) | to_entries
              | map({
                  label: (.value.name // null),
                  value: (.value.value // null),
                  private: (.value.private // false),
                  type: (.value.type // null)
                })
            ) as $allFields
            | {
                id: $mid,
                displayName: $m.name,
                pronouns: $m.pronouns,
                avatar: $m.avatarUrl,
                color: $m.color,
                description: ($m.desc // $m.info // null),
                fields: $allFields,
                warning: (
                  $allFields
                  | map(select(.label == $WARNING_FIELD) | .value)
                  | first // null
                )
              }
          else
            { id: $mid, displayName: null, pronouns: null, avatar: null, color: null, description: null, fields: [], warning: null }
          end
      )
  )
}' > "${PAGES_DIR}/fronts.json"

          echo "Wrote $(wc -c < "${PAGES_DIR}/fronts.json") bytes to fronts.json"

      - name: Validate JSON
        shell: bash
        env:
          PAGES_DIR: ${{ env.PAGES_DIR }}
        run: |
          python -c "import json; json.load(open('${{ env.PAGES_DIR }}/fronts.json')); print('✅ fronts.json is valid')"

      - name: Commit and push if changed
        shell: bash
        env:
          PAGES_BRANCH: ${{ env.PAGES_BRANCH }}
          PAGES_DIR: ${{ env.PAGES_DIR }}
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${PAGES_DIR}/fronts.json"
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Update fronts.json [skip ci]"
          git push origin "${PAGES_BRANCH}"
